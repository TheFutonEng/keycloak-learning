worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    client_body_temp_path /tmp/client_temp;
    proxy_temp_path       /tmp/proxy_temp_path;
    fastcgi_temp_path    /tmp/fastcgi_temp;
    uwsgi_temp_path      /tmp/uwsgi_temp;
    scgi_temp_path       /tmp/scgi_temp;

    # Lua settings
    lua_package_path '~/lua/?.lua;;';
    lua_shared_dict discovery 1m;
    lua_shared_dict jwks 1m;

    server {
        listen ${LISTEN_PORT};
        server_name localhost;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 'healthy\n';
        }

        # OAuth/OIDC configuration
        location / {
            access_by_lua_block {
                local opts = {
                    redirect_uri_path = "/callback",
                    discovery = "${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/.well-known/openid-configuration",
                    client_id = "${CLIENT_ID}",
                    client_secret = "${CLIENT_SECRET}",
                    session_contents = {id_token=true, access_token=true},
                    ssl_verify = "no"
                }

                local res, err = require("resty.openidc").authenticate(opts)
                if err then
                    ngx.status = 500
                    ngx.log(ngx.ERR, "OIDC Error: " .. err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            }

            proxy_pass ${TARGET_URL};
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Callback handling
        location = /callback {
            access_by_lua_block {
                local opts = {
                    redirect_uri_path = "/callback",
                    discovery = "${KEYCLOAK_URL}/realms/${KEYCLOAK_REALM}/.well-known/openid-configuration",
                    client_id = "${CLIENT_ID}",
                    client_secret = "${CLIENT_SECRET}",
                    session_contents = {id_token=true, access_token=true},
                    ssl_verify = "no"
                }

                local res, err = require("resty.openidc").authenticate(opts)
                if err then
                    ngx.status = 500
                    ngx.log(ngx.ERR, "Callback Error: " .. err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                end
            }
        }

        # Debug endpoint
        location = /debug {
            default_type application/json;
            content_by_lua_block {
                ngx.say(require("cjson").encode({
                    headers = ngx.req.get_headers(),
                    uri = ngx.var.uri,
                    method = ngx.req.get_method()
                }))
            }
        }
    }
}